{
    "collab_server" : "",
    "contents" : "#'\n#'\n#'\n#' @param\n#' @return\n#' @export\n#'\n\nfactorizeMyDataset <- function(inputList, setToFactorize, caseOfFactorization){\n\n# factorizeMyDataset (SparkConnection obj, kaggle training dataset in HDFS reference, kaggle training dataset in HDFS reference, case name (f.e. \"case1\"))\n\n  #loading rquired packages\n    library(sparklyr)\n    library(dplyr)\n    library(TuataraChallengePackage)\n\n  if(setToFactorize == \"train\"){\n    datasetToFactorize <- collect(inputList[[2]])\n  }else{\n    datasetToFactorize <- collect(inputList[[3]])\n  }\n\n# creating 3 factorized datasets:\n# 1. where plain factor function is applied to every categorical column,\n# 2. where there is a data sctucture conserved (f.e. A = 1, B = 2, ...),\n# 3. where the columns always have 0-1 values and those that have over 2 levels are split accordingly\n\n  # creating preliminary dataset list to return to user\n  ##\n  ## list[[1]] Sparklyr connection object\n  ##\n  ## list[[2]] element: required (train or test) case 1. datasets:\n  ##                                  - loss = loss\n  ##                                  - loss = log(loss)\n  ## list[[3]] element: required (train or test) case 2. datasets:\n  ##                                  - loss = loss\n  ##                                  - loss = log(loss)\n  ## list[[4]] element: required (train or test) case 3. datasets:\n  ##                                  - loss = loss\n  ##                                  - loss = log(loss)\n\n\n\n# executing factorization\n# case 1.\n  #\n  if(caseOfFactorization == \"case1\"){\n    myTrnDataset1 <- simpleFactorizer(datasetToFactorize)\n    myTrnDatasetLog1 <- myTrnDataset1 %>% mutate(loss = log(loss))\n    listOfDatasetsToReturn <- list(myTrnDataset1, myTrnDatasetLog1)\n  }\n\n# case 2.\n  #\n  if(caseOfFactorization == \"case2\"){\n    myTrnDataset2 <- mapFactorizer(datasetToFactorize)\n    myTrnDatasetLog2 <- myTrnDataset2 %>% mutate(loss = log(loss))\n    listOfDatasetsToReturn<- list(myTrnDataset2, myTrnDatasetLog2)\n  }\n\n# case 3.\n  #\n  if(caseOfFactorization == \"case3\"){\n    myTrnDataset3 <- columnSplitterAndFactorizer(datasetToFactorize)\n    myTrnDatasetLog3 <- myTrnDataset3 %>% mutate(loss = log(loss))\n    listOfDatasetsToReturn <- list(myTrnDataset3, myTrnDatasetLog3)\n  }\n\n\n\n  names(listOfDatasetsToReturn) <- c(\"myDataset\", \"myDatasetLog\")\n\n  return(listOfDatasetsToReturn)\n\n\n\n\n\n}\n\n\n",
    "created" : 1479248296838.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2296861401",
    "id" : "70C6C9D9",
    "lastKnownWriteTime" : 1480551223,
    "last_content_update" : 1480551223882,
    "path" : "~/Desktop/GitFolder/TuataraChallenge/TuataraChallengePackage/R/factorizeMyDataset.R",
    "project_path" : "R/factorizeMyDataset.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}