{
    "collab_server" : "",
    "contents" : "#'\n#' Function to factorize dataset loaded from HDFS\n#'\n#' @param  List returned by function 'readDataFromHDFS()'\n#' @return List: [[1]] Sparklyr connection object, [[2]] Factorized training dataset [[3]] Factorized testing dataset\n#' @export\n#'\n#'\n\n\ncolumnSplitterAndFactorizer <- function(datasetToFactorize){\n\n  # getting columns to factorize\n    columnsToFactorize <- datasetToFactorize %>%\n    select(contains(\"cat\")) %>%\n    colnames()\n\n    columnsToDelete <- c()\n    columnsToAdd <- data.frame()\n\n    for(colIdx in 2:(length(columnsToFactorize)+1)){\n      #progress\n      print(paste0(\"Dataset split and factorized in \", round(100 * colIdx/(length(columnsToFactorize) + 1), 2) , \"%\"))\n\n      currColName <- colnames(datasetToFactorize[, colIdx])\n      workColumn <- datasetToFactorize[, colIdx]\n      names(workColumn) <- c(\"originalCol\")\n\n      if(levels(factor(datasetToFactorize[, colIdx] %>% unlist() %>% as.vector)) %>% length()>2){\n\n        newColsCharVals <- levels(factor(datasetToFactorize[, colIdx] %>% unlist() %>% as.vector))[1:(length(levels(factor(datasetToFactorize[, colIdx] %>% unlist() %>% as.vector)))-1)]\n\n        #newCols <- data.frame()\n\n          for(newColsCharValsIdx in 1:length(newColsCharVals)){\n          # for every level the 0-1 column is created -> newCol\n\n            newCol <- workColumn %>%\n                      mutate(originalCol = ifelse(originalCol == paste0(newColsCharVals[newColsCharValsIdx]), 1, 0)) %>%\n                      unlist() %>%\n                      as.vector() %>%\n                      as.integer() %>%\n                      as.data.frame()\n\n            names(newCol) <- paste0(currColName,\"_\" ,newColsCharVals[newColsCharValsIdx])\n            # newCols dataset is created by combining newCols df with each newCol\n                if(newColsCharValsIdx == 1){\n                  newCols <- data.frame(newCol)\n                }else{\n                  newCols <- data.frame(newCols, newCol)\n                }\n          }\n        # the old column with 3+ levels is removed from dataset\n\n        columnsToDelete <- c(columnsToDelete, colIdx)\n        # the newCols dataset is added to DF\n\n        if (length(names(columnsToAdd)) == 0){\n          columnsToAdd <- newCols\n        }else{\n          columnsToAdd <- cbind(columnsToAdd, newCols)\n        }\n\n\n\n\n      } else{\n\n\n        datasetToFactorize[, colIdx] <- workColumn %>%\n                                          mutate(originalCol = ifelse(originalCol == paste0(levels(factor(datasetToFactorize[, colIdx] %>% unlist() %>% as.vector))[1]),\n                                                                    0,\n                                                                    1)) %>%\n                                          unlist() %>%\n                                          as.vector() %>%\n                                          as.integer()\n\n      }\n\n    }\n    datasetToFactorize <- datasetToFactorize[, -columnsToDelete]\n    datasetToFactorize <- cbind(datasetToFactorize, columnsToAdd)\n\n  return(datasetToFactorize);\n}\n",
    "created" : 1479752546568.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "201138570",
    "id" : "8FC88F65",
    "lastKnownWriteTime" : 1479761306,
    "last_content_update" : 1479761306924,
    "path" : "~/Desktop/GitFolder/TuataraChallenge/TuataraChallengePackage/R/columnSplitterAndFactorizer.R",
    "project_path" : "R/columnSplitterAndFactorizer.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}