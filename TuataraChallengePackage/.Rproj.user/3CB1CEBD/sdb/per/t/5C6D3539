{
    "collab_server" : "",
    "contents" : "#'\n#' Function to factorize dataset loaded from HDFS\n#'\n#' @param  List returned by function 'readDataFromHDFS()'\n#' @return List: [[1]] Sparklyr connection object, [[2]] Factorized training dataset [[3]] Factorized testing dataset\n#' @export\n#'\n\nselectWeakCorrelatedColumns <- function(inputDataFrame, leadLag, corrTreshold){\n  corTestVect <- c()\n  #leadLag <- 10\n  #corrTreshold <- 0.15\n\n  for(colname in colnames(inputDataFrame[, !(colnames(inputDataFrame) %in% c(\"id\", \"loss\"))])){\n\n\n\n    corTestVect <- c(corTestVect,\n\n                     cor( unlist(\n                       inputDataFrame[, (colnames(inputDataFrame) %in% paste0(colname))]\n                     ),\n                     inputDataFrame$loss,\n                     method = \"spearman\")\n\n    ) %>%\n      abs()\n  }\n\n  corTestDF <- data.frame(corTestVect, colnames(inputDataFrame[, !(colnames(inputDataFrame) %in% c(\"id\", \"loss\"))])) %>%\n    arrange(desc(corTestVect))\n  names(corTestDF) <- c(\"corToLoss\",\"colName\")\n\n  corTestDF <- corTestDF %>%\n    filter(corToLoss >= 0.1)\n\n  #printing 3 best correlated columns\n  for(i in 1:3) print(corTestDF$colName[i])\n\n\n  corTestDF <- corTestDF[leadLag:length(corTestDF$colName),]\n\n  corToSingleVar <- c()\n\n  bestCorrIdx <- 1\n  selectedCols <- c()\n  isNextCol <- TRUE\n\n  while(isNextCol){\n    corrTestOthersToBestVect <- c()\n    corrOthersToBestVect <- c()\n    selectedCols <- c(selectedCols, as.character(corTestDF$colName[1]))\n\n    for(colname in corTestDF$colName[-1]){\n      corrOthersToBestVect <- c(corrOthersToBestVect,\n                                cor(\n                                  unlist(\n                                    inputDataFrame[, grep(pattern = paste0(\"^\",corTestDF$colName[bestCorrIdx], \"$\"), colnames(inputDataFrame))]\n                                  ),\n                                  unlist(\n                                    inputDataFrame[, grep(pattern = paste0(\"^\",colname,\"$\"), colnames(inputDataFrame))]\n\n                                  ),\n                                  method = \"spearman\"\n                                )\n      ) %>% abs()\n\n      corrTestOthersToBestVect <- c(corrTestOthersToBestVect,\n                                    ifelse(cor.test(\n                                      unlist(\n                                        inputDataFrame[, grep(pattern = paste0(\"^\",corTestDF$colName[bestCorrIdx], \"$\"), colnames(inputDataFrame))]\n                                      ),\n                                      unlist(\n                                        inputDataFrame[, grep(pattern = paste0(\"^\",colname,\"$\"), colnames(inputDataFrame))]\n                                      ),\n                                      method = \"spearman\")$p.value >= 0.05, 0, 1 )\n      )\n\n    }\n    corrToBestDF <- data.frame(corTestDF$colName[-1], corrOthersToBestVect, corrTestOthersToBestVect)\n    names(corrToBestDF) <- c(\"varName\", \"varCorrToBest\", \"varCorrSignif\")\n    corrToBestDF <- corrToBestDF %>% mutate(varCorrToBest = ifelse(varCorrSignif == 0, 0, varCorrToBest))\n    nonCorrelatedToBest <- corrToBestDF %>% filter(varCorrToBest <= corrTreshold)\n\n    corTestDF <- corTestDF %>% filter(colName %in% nonCorrelatedToBest$varName)\n\n    if(length(corTestDF$colName) > 1){\n      isNextCol <- TRUE\n    }else if (length(corTestDF$colName) == 1){\n      isNextCol <- FALSE\n      selectedCols <- c(selectedCols, as.character(corTestDF$colName[1]))\n    }else{\n      isNextCol <- FALSE\n    }\n\n  }\n  selectedCols <- c(\"id\", selectedCols,\"loss\")\n\n\n  inputDataFrame  <-  inputDataFrame[, colnames(inputDataFrame) %in% selectedCols]\n\n}\n",
    "created" : 1480010690462.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4274306628",
    "id" : "5C6D3539",
    "lastKnownWriteTime" : 1480015228,
    "last_content_update" : 1480015228836,
    "path" : "~/Desktop/GitFolder/TuataraChallenge/TuataraChallengePackage/R/selectWeakCorrelatedColumns.R",
    "project_path" : "R/selectWeakCorrelatedColumns.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}